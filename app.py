import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json
import os
import sys

# Apr√®s la ligne d'import de os et sys

# Affichage des informations de diagnostic
print("Chemin Python:", sys.path)
print("Dossier courant:", os.getcwd())
print("Contenu du dossier:", os.listdir())

# Ajouter le r√©pertoire courant au chemin d'importation
sys.path.append(os.getcwd())

# V√©rifier si le dossier queries existe
if os.path.exists("queries"):
    print("Contenu du dossier queries:", os.listdir("queries"))
else:
    print("Le dossier queries n'existe pas!")
    # Tenter de cr√©er le dossier __init__.py si n√©cessaire
    os.makedirs("queries", exist_ok=True)
    with open(os.path.join("queries", "__init__.py"), "w") as f:
        pass  # Cr√©er un fichier vide

# Importer les modules de connexion
from mongodb_connect import MongoDBConnector
from neo4j_connect import Neo4jConnector

# Importer les modules de requ√™tes
try:
    # Essayer d'importer directement
    sys.path.append("queries")
    from queries.mongodb_queries import MongoDBQueries
    from queries.neo4j_queries import Neo4jQueries
    queries_imported = True
    print("‚úÖ Modules de requ√™tes import√©s avec succ√®s!")
except ImportError as e:
    print(f"‚ùå Erreur d'importation: {e}")
    try:
        # Essayer une autre m√©thode d'importation
        import importlib.util
        
        # Importer mongodb_queries.py
        spec_mongo = importlib.util.spec_from_file_location(
            "mongodb_queries", 
            os.path.join(os.getcwd(), "queries", "mongodb_queries.py")
        )
        mongodb_queries = importlib.util.module_from_spec(spec_mongo)
        spec_mongo.loader.exec_module(mongodb_queries)
        
        # Importer neo4j_queries.py
        spec_neo4j = importlib.util.spec_from_file_location(
            "neo4j_queries", 
            os.path.join(os.getcwd(), "queries", "neo4j_queries.py")
        )
        neo4j_queries = importlib.util.module_from_spec(spec_neo4j)
        spec_neo4j.loader.exec_module(neo4j_queries)
        
        # Acc√©der aux classes
        MongoDBQueries = mongodb_queries.MongoDBQueries
        Neo4jQueries = neo4j_queries.Neo4jQueries
        
        queries_imported = True
        print("‚úÖ Modules de requ√™tes import√©s avec la m√©thode alternative!")
    except Exception as e2:
        print(f"‚ùå Erreur d'importation alternative: {e2}")
        queries_imported = False
        st.warning("Les modules de requ√™tes n'ont pas √©t√© trouv√©s. Certaines fonctionnalit√©s seront limit√©es.")

# Titre et description
st.title("üé¨ Exploration et interrogation de bases de donn√©es NoSQL")
st.markdown("""
Cette application permet d'explorer et d'interroger des donn√©es de films stock√©es dans MongoDB et Neo4j.
""")

# Le reste de votre code app.py suit...
# Sidebar pour la navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio(
    "S√©lectionnez une page",
    ["Accueil", "Configuration", "MongoDB - Requ√™tes", "Neo4j - Requ√™tes", "Visualisations", "√Ä propos"]
)

# Variables de session pour stocker les connecteurs
if 'mongo_connector' not in st.session_state:
    st.session_state.mongo_connector = None
if 'neo4j_connector' not in st.session_state:
    st.session_state.neo4j_connector = None
if 'mongo_queries' not in st.session_state:
    st.session_state.mongo_queries = None
if 'neo4j_queries' not in st.session_state:
    st.session_state.neo4j_queries = None

# Page d'accueil
if page == "Accueil":
    st.header("Bienvenue dans l'application de projet NoSQL")
    
    st.subheader("Pr√©sentation du projet")
    st.write("""
    Ce projet vise √† explorer deux types de syst√®mes de gestion de bases de donn√©es NoSQL :
    - **MongoDB** : une base de donn√©es orient√©e document
    - **Neo4j** : une base de donn√©es orient√©e graphe
    
    L'application permet de :
    1. Se connecter aux bases de donn√©es
    2. Importer des donn√©es de films
    3. Ex√©cuter diverses requ√™tes
    4. Visualiser les r√©sultats
    """)
    
    st.subheader("Comment utiliser cette application")
    st.write("""
    1. Commencez par configurer les connexions aux bases de donn√©es dans l'onglet "Configuration".
    2. Explorez les requ√™tes MongoDB et Neo4j dans leurs onglets respectifs.
    3. Visualisez les donn√©es dans l'onglet "Visualisations".
    """)

# Page de configuration
elif page == "Configuration":
    st.header("Configuration des connexions aux bases de donn√©es")
    
    # Configuration MongoDB
    st.subheader("Configuration MongoDB")
    mongo_tab1, mongo_tab2 = st.tabs(["Connexion locale", "Connexion Atlas"])
    
    with mongo_tab1:
        if st.button("Connexion MongoDB locale"):
            st.session_state.mongo_connector = MongoDBConnector(local=True)
            if st.session_state.mongo_connector.client:
                st.success("Connexion √† MongoDB locale √©tablie avec succ√®s!")
                if queries_imported:
                    st.session_state.mongo_queries = MongoDBQueries(st.session_state.mongo_connector)
            else:
                st.error("√âchec de la connexion √† MongoDB locale.")
    
    with mongo_tab2:
        connection_string = st.text_input("Cha√Æne de connexion MongoDB Atlas", type="password")
        if st.button("Connexion MongoDB Atlas"):
            st.session_state.mongo_connector = MongoDBConnector(connection_string=connection_string, local=False)
            if st.session_state.mongo_connector.client:
                st.success("Connexion √† MongoDB Atlas √©tablie avec succ√®s!")
                if queries_imported:
                    st.session_state.mongo_queries = MongoDBQueries(st.session_state.mongo_connector)
            else:
                st.error("√âchec de la connexion √† MongoDB Atlas.")
    
    # Import des donn√©es MongoDB
    if st.session_state.mongo_connector and st.session_state.mongo_connector.client:
        st.subheader("Import des donn√©es dans MongoDB")
        json_file = st.text_input("Chemin du fichier JSON", "data/movies.json")
        
        # V√©rifier si le fichier existe
        file_exists = os.path.isfile(json_file)
        if not file_exists:
            st.warning(f"Le fichier {json_file} n'existe pas. Veuillez v√©rifier le chemin.")
        
        if st.button("Importer les donn√©es", disabled=not file_exists):
            st.session_state.mongo_connector.import_json_data(json_file)
            st.success("Donn√©es import√©es avec succ√®s!")
    
    # Configuration Neo4j
    st.subheader("Configuration Neo4j")
    neo4j_tab1, neo4j_tab2 = st.tabs(["Connexion locale", "Connexion cloud"])
    
    with neo4j_tab1:
        if st.button("Connexion Neo4j locale"):
            st.session_state.neo4j_connector = Neo4jConnector(local=True)
            if st.session_state.neo4j_connector.graph:
                st.success("Connexion √† Neo4j locale √©tablie avec succ√®s!")
                if queries_imported:
                    st.session_state.neo4j_queries = Neo4jQueries(st.session_state.neo4j_connector)
            else:
                st.error("√âchec de la connexion √† Neo4j locale.")
    
    with neo4j_tab2:
        uri = st.text_input("URI Neo4j")
        user = st.text_input("Nom d'utilisateur Neo4j")
        password = st.text_input("Mot de passe Neo4j", type="password")
        if st.button("Connexion Neo4j cloud"):
            st.session_state.neo4j_connector = Neo4jConnector(uri=uri, user=user, password=password, local=False)
            if st.session_state.neo4j_connector.graph:
                st.success("Connexion √† Neo4j cloud √©tablie avec succ√®s!")
                if queries_imported:
                    st.session_state.neo4j_queries = Neo4jQueries(st.session_state.neo4j_connector)
            else:
                st.error("√âchec de la connexion √† Neo4j cloud.")
    
    # Import des donn√©es dans Neo4j depuis MongoDB
    if (st.session_state.mongo_connector and st.session_state.mongo_connector.client and 
        st.session_state.neo4j_connector and st.session_state.neo4j_connector.graph):
        
        st.subheader("Import des donn√©es de MongoDB vers Neo4j")
        
        st.write("Cr√©er des contraintes et des index dans Neo4j")
        if st.button("Cr√©er des contraintes"):
            st.session_state.neo4j_connector.create_constraints_and_indexes()
            st.success("Contraintes et index cr√©√©s avec succ√®s!")
        
        st.write("Cr√©er les n≈ìuds Film")
        if st.button("Cr√©er les n≈ìuds Film"):
            st.session_state.neo4j_connector.create_film_nodes(st.session_state.mongo_connector)
            st.success("N≈ìuds Film cr√©√©s avec succ√®s!")
        
        st.write("Cr√©er les n≈ìuds Actor et leurs relations")
        if st.button("Cr√©er les n≈ìuds Actor"):
            st.session_state.neo4j_connector.create_actor_nodes_and_relationships(st.session_state.mongo_connector)
            st.success("N≈ìuds Actor et relations cr√©√©s avec succ√®s!")
        
        st.write("Cr√©er les n≈ìuds Director et leurs relations")
        if st.button("Cr√©er les n≈ìuds Director"):
            st.session_state.neo4j_connector.create_director_nodes_and_relationships(st.session_state.mongo_connector)
            st.success("N≈ìuds Director et relations cr√©√©s avec succ√®s!")
        
        st.write("Ajouter les membres de l'√©quipe du projet")
        team_members = st.text_input("Noms des membres de l'√©quipe (s√©par√©s par des virgules)")
        if st.button("Ajouter l'√©quipe"):
            members_list = [member.strip() for member in team_members.split(",") if member.strip()]
            if members_list:
                st.session_state.neo4j_connector.create_team_nodes(members_list)
                st.success("Membres de l'√©quipe ajout√©s avec succ√®s!")
            else:
                st.warning("Veuillez entrer au moins un nom d'√©quipe.")

# Page MongoDB Requ√™tes
elif page == "MongoDB - Requ√™tes":
    st.header("Requ√™tes MongoDB")
    
    if not st.session_state.mongo_connector or not st.session_state.mongo_connector.client:
        st.warning("Vous devez d'abord configurer la connexion √† MongoDB!")
    elif not queries_imported:
        st.warning("Le module de requ√™tes MongoDB n'a pas √©t√© import√© correctement.")
    else:
        # S'assurer que mongo_queries est instanci√©
        if st.session_state.mongo_queries is None:
            st.session_state.mongo_queries = MongoDBQueries(st.session_state.mongo_connector)
        
        # Liste des requ√™tes disponibles
        query_options = [
            "1. Ann√©e avec le plus de films",
            "2. Nombre de films apr√®s 1999",
            "3. Moyenne des votes en 2007",
            "4. Histogramme des films par ann√©e",
            "5. Genres disponibles",
            "6. Film avec le plus de revenus",
            "7. R√©alisateurs avec plus de 5 films",
            "8. Genre avec le plus de revenus en moyenne",
            "9. Top 3 films par d√©cennie",
            "10. Film le plus long par genre",
            "11. Vue des films avec notes > 80 et revenus > 50M",
            "12. Corr√©lation dur√©e/revenus",
            "13. √âvolution dur√©e moyenne par d√©cennie",
            "27. Films avec genres communs et r√©alisateurs diff√©rents"
        ]
        
        selected_query = st.selectbox("S√©lectionnez une requ√™te", query_options)
        
        if st.button("Ex√©cuter la requ√™te"):
            # Ex√©cuter la requ√™te s√©lectionn√©e
            query_num = int(selected_query.split('.')[0])
            
            if query_num == 1:
                year, count = st.session_state.mongo_queries.query_1_year_with_most_films()
                if year and count:
                    st.success(f"L'ann√©e avec le plus de films est {year} avec {count} films.")
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 2:
                count = st.session_state.mongo_queries.query_2_films_after_1999()
                st.success(f"Nombre de films sortis apr√®s 1999 : {count}")
            
            elif query_num == 3:
                avg_votes = st.session_state.mongo_queries.query_3_average_votes_2007()
                st.success(f"Moyenne des votes des films de 2007 : {avg_votes:.2f}")
            
            elif query_num == 4:
                fig = st.session_state.mongo_queries.query_4_films_per_year_histogram()
                if fig:
                    st.pyplot(fig)
                else:
                    st.warning("Impossible de g√©n√©rer l'histogramme.")
            
            elif query_num == 5:
                genres = st.session_state.mongo_queries.query_5_available_genres()
                st.write("Genres disponibles dans la base :")
                st.write(genres)
            
            elif query_num == 6:
                film = st.session_state.mongo_queries.query_6_highest_revenue_film()
                if film:
                    st.success(f"Le film avec le plus de revenus est '{film.get('title')}' avec {film.get('Revenue (Millions)')} millions de dollars.")
                    st.json(film)
                else:
                    st.warning("Aucun film trouv√©.")
            
            elif query_num == 7:
                directors = st.session_state.mongo_queries.query_7_directors_with_more_than_5_films()
                if directors:
                    st.write("R√©alisateurs ayant r√©alis√© plus de 5 films :")
                    st.table(pd.DataFrame(directors).rename(columns={"_id": "R√©alisateur", "count": "Nombre de films"}))
                else:
                    st.warning("Aucun r√©alisateur n'a r√©alis√© plus de 5 films.")
            
            elif query_num == 8:
                genre, avg_revenue = st.session_state.mongo_queries.query_8_highest_average_revenue_genre()
                if genre:
                    st.success(f"Le genre '{genre}' rapporte en moyenne le plus de revenus avec {avg_revenue:.2f} millions de dollars par film.")
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 9:
                top_films = st.session_state.mongo_queries.query_9_top_3_films_by_decade()
                if top_films:
                    st.write("Top 3 films par d√©cennie :")
                    for decade, films in top_films.items():
                        st.subheader(f"D√©cennie {decade}")
                        st.table(pd.DataFrame(films))
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 10:
                longest_films = st.session_state.mongo_queries.query_10_longest_film_by_genre()
                if longest_films:
                    st.write("Film le plus long par genre :")
                    st.table(pd.DataFrame(longest_films))
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 11:
                count = st.session_state.mongo_queries.query_11_create_high_rated_high_revenue_view()
                st.success(f"Vue cr√©√©e avec {count} films ayant une note > 80 et des revenus > 50M.")
            
            elif query_num == 12:
                corr, p_value, df = st.session_state.mongo_queries.query_12_runtime_revenue_correlation()
                if df is not None:
                    st.success(f"Coefficient de corr√©lation entre dur√©e et revenus : {corr:.4f} (p-value: {p_value:.4f})")
                    
                    # Cr√©er un scatter plot
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.scatterplot(data=df, x='Runtime (Minutes)', y='Revenue (Millions)', ax=ax)
                    ax.set_title('Corr√©lation entre dur√©e et revenus des films')
                    
                    # Ajouter une ligne de tendance
                    sns.regplot(data=df, x='Runtime (Minutes)', y='Revenue (Millions)', 
                                scatter=False, ci=None, ax=ax, color='red')
                    
                    st.pyplot(fig)
                else:
                    st.warning("Donn√©es insuffisantes pour calculer la corr√©lation.")
            
            elif query_num == 13:
                avg_runtime_by_decade, fig = st.session_state.mongo_queries.query_13_average_runtime_by_decade()
                if avg_runtime_by_decade is not None:
                    st.write("Dur√©e moyenne des films par d√©cennie :")
                    st.table(avg_runtime_by_decade)
                    st.pyplot(fig)
                else:
                    st.warning("Donn√©es insuffisantes pour analyser la dur√©e par d√©cennie.")
            
            elif query_num == 27:
                films_with_common_genres = st.session_state.mongo_queries.query_27_films_with_common_genres_different_directors()
                if films_with_common_genres:
                    st.write("Films avec des genres communs mais des r√©alisateurs diff√©rents :")
                    
                    # Cr√©er un DataFrame pour l'affichage
                    df = pd.DataFrame(films_with_common_genres, columns=['Film 1', 'Film 2', 'Genres communs'])
                    st.table(df.head(20))  # Limiter √† 20 lignes pour la lisibilit√©
                    
                    st.info(f"Total trouv√© : {len(films_with_common_genres)} paires de films (limit√© √† 20 pour l'affichage)")
                else:
                    st.warning("Aucune paire de films trouv√©e.")

# Page Neo4j Requ√™tes
elif page == "Neo4j - Requ√™tes":
    st.header("Requ√™tes Neo4j")
    
    if not st.session_state.neo4j_connector or not st.session_state.neo4j_connector.graph:
        st.warning("Vous devez d'abord configurer la connexion √† Neo4j!")
    elif not queries_imported:
        st.warning("Le module de requ√™tes Neo4j n'a pas √©t√© import√© correctement.")
    else:
        # S'assurer que neo4j_queries est instanci√©
        if st.session_state.neo4j_queries is None:
            st.session_state.neo4j_queries = Neo4jQueries(st.session_state.neo4j_connector)
        
        # Liste des requ√™tes disponibles
        query_options = [
            "14. Acteur avec le plus de films",
            "15. Acteurs ayant jou√© avec Anne Hathaway",
            "16. Acteur avec le plus de revenus",
            "17. Moyenne des votes",
            "18. Genre le plus repr√©sent√©",
            "19. Films des acteurs ayant jou√© avec vous",
            "20. R√©alisateur avec le plus d'acteurs",
            "21. Films les plus connect√©s",
            "22. 5 acteurs avec le plus de r√©alisateurs",
            "23. Recommandation de film pour un acteur",
            "24. Relation d'influence entre r√©alisateurs",
            "25. Chemin le plus court entre deux acteurs",
            "26. Analyse des communaut√©s d'acteurs",
            "28. Recommandation bas√©e sur les pr√©f√©rences d'un acteur",
            "29. Relation de concurrence entre r√©alisateurs",
            "30. Analyse des collaborations r√©alisateur-acteur"
        ]
        
        selected_query = st.selectbox("S√©lectionnez une requ√™te", query_options)
        query_num = int(selected_query.split('.')[0])
        
        # Afficher les champs sp√©cifiques en fonction de la requ√™te s√©lectionn√©e
        if query_num == 19:
            team_member = st.text_input("Nom du membre de l'√©quipe")
        elif query_num == 23 or query_num == 28:
            actor_name = st.text_input("Nom de l'acteur")
        elif query_num == 25:
            actor1 = st.text_input("Premier acteur")
            actor2 = st.text_input("Deuxi√®me acteur")
        
        if st.button("Ex√©cuter la requ√™te"):
            # Ex√©cuter la requ√™te s√©lectionn√©e
            if query_num == 14:
                actor, count = st.session_state.neo4j_queries.query_14_actor_with_most_films()
                if actor:
                    st.success(f"L'acteur ayant jou√© dans le plus grand nombre de films est '{actor}' avec {count} films.")
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 15:
                actors = st.session_state.neo4j_queries.query_15_actors_played_with_anne_hathaway()
                if actors:
                    st.write("Acteurs ayant jou√© avec Anne Hathaway :")
                    
                    # Cr√©er un DataFrame pour l'affichage
                    df = pd.DataFrame(actors)
                    st.dataframe(df)
                else:
                    st.warning("Aucun acteur n'a jou√© avec Anne Hathaway ou elle n'est pas dans la base.")
            
            elif query_num == 16:
                actor, revenue = st.session_state.neo4j_queries.query_16_actor_with_highest_revenue()
                if actor:
                    st.success(f"L'acteur ayant jou√© dans des films totalisant le plus de revenus est '{actor}' avec {revenue:.2f} millions de dollars.")
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 17:
                avg_votes = st.session_state.neo4j_queries.query_17_average_votes()
                st.success(f"La moyenne des votes est de {avg_votes:.2f}.")
            
            elif query_num == 18:
                genre, count = st.session_state.neo4j_queries.query_18_most_represented_genre()
                if genre:
                    st.success(f"Le genre le plus repr√©sent√© est '{genre}' avec {count} films.")
                else:
                    st.warning("Aucun r√©sultat trouv√© ou pas de n≈ìuds Genre.")
            
            elif query_num == 19:
                if not team_member:
                    st.warning("Veuillez entrer le nom d'un membre de l'√©quipe.")
                else:
                    films = st.session_state.neo4j_queries.query_19_films_with_your_costars(team_member)
                    if films:
                        st.write(f"Films des acteurs ayant jou√© avec {team_member} :")
                        st.dataframe(pd.DataFrame(films))
                    else:
                        st.warning(f"Aucun film trouv√© ou {team_member} n'est pas dans la base.")
            
            elif query_num == 20:
                director, count = st.session_state.neo4j_queries.query_20_director_with_most_actors()
                if director:
                    st.success(f"Le r√©alisateur ayant travaill√© avec le plus d'acteurs est '{director}' avec {count} acteurs.")
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 21:
                films = st.session_state.neo4j_queries.query_21_most_connected_films()
                if films:
                    st.write("Films les plus connect√©s (avec le plus d'acteurs en commun) :")
                    
                    # Cr√©er un DataFrame pour l'affichage
                    df = pd.DataFrame(films)
                    st.dataframe(df)
                else:
                    st.warning("Aucun film connect√© trouv√©.")
            
            elif query_num == 22:
                actors = st.session_state.neo4j_queries.query_22_actors_with_most_directors()
                if actors:
                    st.write("Acteurs ayant jou√© avec le plus de r√©alisateurs diff√©rents :")
                    
                    # Cr√©er un DataFrame pour l'affichage
                    df = pd.DataFrame(actors)
                    st.dataframe(df)
                else:
                    st.warning("Aucun r√©sultat trouv√©.")
            
            elif query_num == 23:
                if not actor_name:
                    st.warning("Veuillez entrer le nom d'un acteur.")
                else:
                    recommendations = st.session_state.neo4j_queries.query_23_recommend_film_for_actor(actor_name)
                    if recommendations:
                        st.write(f"Films recommand√©s pour {actor_name} :")
                        st.dataframe(pd.DataFrame(recommendations))
                    else:
                        st.warning(f"Aucune recommandation trouv√©e pour {actor_name}.")
            
            elif query_num == 24:
                count = st.session_state.neo4j_queries.query_24_create_influence_relationships()
                st.success(f"{count} relations d'influence cr√©√©es entre r√©alisateurs.")
            
            elif query_num == 25:
                if not actor1 or not actor2:
                    st.warning("Veuillez entrer les noms des deux acteurs.")
                else:
                    path = st.session_state.neo4j_queries.query_25_shortest_path_between_actors(actor1, actor2)
                    if path:
                        st.write(f"Chemin le plus court entre {actor1} et {actor2} :")
                        
                        # Afficher le chemin sous forme de liste
                        path_display = []
                        for i, node in enumerate(path):
                            if node.get('type') == 'Actor':
                                path_display.append(f"üë§ {node.get('name')}")
                            elif node.get('type') == 'Film':
                                path_display.append(f"üé¨ {node.get('title')}")
                            
                            if i < len(path) - 1:
                                path_display.append("‚Üí")
                        
                        st.markdown(" ".join(path_display))
                    else:
                        st.warning(f"Aucun chemin trouv√© entre {actor1} et {actor2}.")
            
            elif query_num == 26:
                df_communities, graph = st.session_state.neo4j_queries.query_26_actor_communities()
                if df_communities is not None:
                    st.write("Communaut√©s d'acteurs d√©tect√©es :")
                    st.dataframe(df_communities)
                    
                    # Ajouter un graphique simple pour visualiser
                    if graph:
                        st.info("Une analyse plus d√©taill√©e des communaut√©s d'acteurs a √©t√© effectu√©e. Voir le rapport pour les visualisations compl√®tes.")
                else:
                    st.warning("Impossible d'analyser les communaut√©s d'acteurs.")
            
            elif query_num == 28:
                if not actor_name:
                    st.warning("Veuillez entrer le nom d'un acteur.")
                else:
                    recommendations = st.session_state.neo4j_queries.query_28_recommend_films_based_on_actor_preferences(actor_name)
                    if recommendations:
                        st.write(f"Films recommand√©s bas√©s sur les pr√©f√©rences de {actor_name} :")
                        st.dataframe(pd.DataFrame(recommendations))
                    else:
                        st.warning(f"Aucune recommandation trouv√©e bas√©e sur {actor_name}.")
            
            elif query_num == 29:
                count = st.session_state.neo4j_queries.query_29_create_competition_relationship()
                st.success(f"{count} relations de concurrence cr√©√©es entre r√©alisateurs.")
            
            elif query_num == 30:
                df_collaborations, df_commercial = st.session_state.neo4j_queries.query_30_analyze_director_actor_collaborations()
                if df_collaborations is not None:
                    st.write("Collaborations fr√©quentes entre r√©alisateurs et acteurs :")
                    st.dataframe(df_collaborations)
                    
                    st.write("Analyse commerciale des collaborations :")
                    st.dataframe(df_commercial)
                else:
                    st.warning("Aucune collaboration fr√©quente trouv√©e.")

# Page Visualisations
elif page == "Visualisations":
    st.header("Visualisations")
    
    if ((not st.session_state.mongo_connector or not st.session_state.mongo_connector.client) and
        (not st.session_state.neo4j_connector or not st.session_state.neo4j_connector.graph)):
        st.warning("Vous devez d'abord configurer au moins une connexion aux bases de donn√©es!")
    elif not queries_imported:
        st.warning("Les modules de requ√™tes n'ont pas √©t√© import√©s correctement.")
    else:
        # Onglets pour les visualisations MongoDB et Neo4j
        tab1, tab2 = st.tabs(["Visualisations MongoDB", "Visualisations Neo4j"])
        
        with tab1:
            if not st.session_state.mongo_connector or not st.session_state.mongo_connector.client:
                st.warning("Vous devez d'abord configurer la connexion √† MongoDB!")
            else:
                # S'assurer que mongo_queries est instanci√©
                if st.session_state.mongo_queries is None:
                    st.session_state.mongo_queries = MongoDBQueries(st.session_state.mongo_connector)
                
                # Options de visualisation MongoDB
                mongo_viz_options = [
                    "Histogramme des films par ann√©e",
                    "Distribution des genres",
                    "Corr√©lation dur√©e/revenus",
                    "√âvolution de la dur√©e moyenne par d√©cennie",
                    "Top r√©alisateurs par nombre de films"
                ]
                
                selected_mongo_viz = st.selectbox("S√©lectionnez une visualisation", mongo_viz_options)
                
                if st.button("G√©n√©rer la visualisation MongoDB"):
                    if selected_mongo_viz == "Histogramme des films par ann√©e":
                        fig = st.session_state.mongo_queries.query_4_films_per_year_histogram()
                        if fig:
                            st.pyplot(fig)
                    
                    elif selected_mongo_viz == "Distribution des genres":
                        # R√©cup√©rer les genres et cr√©er un graphique
                        genres = st.session_state.mongo_queries.query_5_available_genres()
                        
                        if genres:
                            # Compter les films par genre
                            genre_counts = {}
                            
                            # Cette requ√™te est simplifi√©e et pourrait √™tre remplac√©e par une m√©thode d√©di√©e
                            films_data = list(st.session_state.mongo_connector.films.find({}, {"genre": 1}))
                            
                            for film in films_data:
                                if "genre" in film and film["genre"]:
                                    film_genres = [g.strip() for g in film["genre"].split(",")]
                                    for g in film_genres:
                                        genre_counts[g] = genre_counts.get(g, 0) + 1
                            
                            # Cr√©er un DataFrame et trier
                            df_genres = pd.DataFrame(list(genre_counts.items()), columns=["Genre", "Count"])
                            df_genres = df_genres.sort_values("Count", ascending=False)
                            
                            # Cr√©er le graphique
                            fig, ax = plt.subplots(figsize=(12, 6))
                            sns.barplot(data=df_genres, x="Genre", y="Count", ax=ax)
                            ax.set_title("Nombre de films par genre")
                            ax.set_xlabel("Genre")
                            ax.set_ylabel("Nombre de films")
                            plt.xticks(rotation=45, ha='right')
                            plt.tight_layout()
                            
                            st.pyplot(fig)
                        else:
                            st.warning("Aucun genre trouv√©.")
                    
                    elif selected_mongo_viz == "Corr√©lation dur√©e/revenus":
                        corr, p_value, df = st.session_state.mongo_queries.query_12_runtime_revenue_correlation()
                        if df is not None:
                            st.write(f"Coefficient de corr√©lation : {corr:.4f} (p-value: {p_value:.4f})")
                            
                            # Cr√©er un scatter plot
                            fig, ax = plt.subplots(figsize=(10, 6))
                            sns.scatterplot(data=df, x='Runtime (Minutes)', y='Revenue (Millions)', ax=ax)
                            ax.set_title('Corr√©lation entre dur√©e et revenus des films')
                            
                            # Ajouter une ligne de tendance
                            sns.regplot(data=df, x='Runtime (Minutes)', y='Revenue (Millions)', 
                                      scatter=False, ci=None, ax=ax, color='red')
                            
                            st.pyplot(fig)
                        else:
                            st.warning("Donn√©es insuffisantes pour calculer la corr√©lation.")
                    
                    elif selected_mongo_viz == "√âvolution de la dur√©e moyenne par d√©cennie":
                        avg_runtime_by_decade, fig = st.session_state.mongo_queries.query_13_average_runtime_by_decade()
                        if avg_runtime_by_decade is not None:
                            st.table(avg_runtime_by_decade)
                            st.pyplot(fig)
                        else:
                            st.warning("Donn√©es insuffisantes pour analyser la dur√©e par d√©cennie.")
                    
                    elif selected_mongo_viz == "Top r√©alisateurs par nombre de films":
                        # R√©cup√©rer les r√©alisateurs et le nombre de films
                        directors_data = list(st.session_state.mongo_connector.films.aggregate([
                            {"$group": {"_id": "$Director", "count": {"$sum": 1}}},
                            {"$sort": {"count": -1}},
                            {"$limit": 15}
                        ]))
                        
                        if directors_data:
                            # Cr√©er un DataFrame
                            df_directors = pd.DataFrame(directors_data)
                            df_directors.columns = ["Director", "Films"]
                            
                            # Cr√©er le graphique
                            fig, ax = plt.subplots(figsize=(12, 6))
                            sns.barplot(data=df_directors, x="Director", y="Films", ax=ax)
                            ax.set_title("Top 15 r√©alisateurs par nombre de films")
                            ax.set_xlabel("R√©alisateur")
                            ax.set_ylabel("Nombre de films")
                            plt.xticks(rotation=45, ha='right')
                            plt.tight_layout()
                            
                            st.pyplot(fig)
                        else:
                            st.warning("Aucun r√©alisateur trouv√©.")
        
        with tab2:
            if not st.session_state.neo4j_connector or not st.session_state.neo4j_connector.graph:
                st.warning("Vous devez d'abord configurer la connexion √† Neo4j!")
            else:
                # S'assurer que neo4j_queries est instanci√©
                if st.session_state.neo4j_queries is None:
                    st.session_state.neo4j_queries = Neo4jQueries(st.session_state.neo4j_connector)
                
                st.info("Les visualisations Neo4j sont mieux rendues dans Neo4j Browser. Cette section montre des aper√ßus simplifi√©s.")
                
                # Options de visualisation Neo4j
                neo4j_viz_options = [
                    "Top acteurs par nombre de films",
                    "Statistiques des acteurs",
                    "Collaborations r√©alisateur-acteur"
                ]
                
                selected_neo4j_viz = st.selectbox("S√©lectionnez une visualisation", neo4j_viz_options)
                
                if st.button("G√©n√©rer la visualisation Neo4j"):
                    if selected_neo4j_viz == "Top acteurs par nombre de films":
                        # Ex√©cuter une requ√™te pour obtenir les top acteurs
                        top_actors_query = """
                        MATCH (a:Actor)-[:A_JOUE]->(f:Film)
                        WITH a.name AS actor, count(f) AS film_count
                        ORDER BY film_count DESC
                        LIMIT 15
                        RETURN actor, film_count
                        """
                        
                        try:
                            top_actors = st.session_state.neo4j_connector.graph.run(top_actors_query).data()
                            
                            if top_actors:
                                # Cr√©er un DataFrame
                                df_top_actors = pd.DataFrame(top_actors)
                                
                                # Cr√©er le graphique
                                fig, ax = plt.subplots(figsize=(12, 6))
                                sns.barplot(data=df_top_actors, x="actor", y="film_count", ax=ax)
                                ax.set_title("Top 15 acteurs par nombre de films")
                                ax.set_xlabel("Acteur")
                                ax.set_ylabel("Nombre de films")
                                plt.xticks(rotation=45, ha='right')
                                plt.tight_layout()
                                
                                st.pyplot(fig)
                            else:
                                st.warning("Aucun acteur trouv√©.")
                        except Exception as e:
                            st.error(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")
                    
                    elif selected_neo4j_viz == "Statistiques des acteurs":
                        # Requ√™te pour obtenir des statistiques sur les acteurs
                        actors_stats_query = """
                        MATCH (a:Actor)-[:A_JOUE]->(f:Film)
                        WITH a, count(f) AS film_count
                        RETURN 
                            min(film_count) AS min_films,
                            max(film_count) AS max_films,
                            avg(film_count) AS avg_films,
                            count(a) AS total_actors
                        """
                        
                        try:
                            stats = st.session_state.neo4j_connector.graph.run(actors_stats_query).data()[0]
                            
                            # Afficher les statistiques
                            st.write("Statistiques des acteurs :")
                            st.write(f"Nombre total d'acteurs : {stats['total_actors']}")
                            st.write(f"Nombre minimum de films par acteur : {stats['min_films']}")
                            st.write(f"Nombre maximum de films par acteur : {stats['max_films']}")
                            st.write(f"Nombre moyen de films par acteur : {stats['avg_films']:.2f}")
                            
                            # Distribution des acteurs par nombre de films
                            distribution_query = """
                            MATCH (a:Actor)-[:A_JOUE]->(f:Film)
                            WITH a, count(f) AS film_count
                            RETURN film_count, count(a) AS actor_count
                            ORDER BY film_count
                            """
                            
                            distribution = st.session_state.neo4j_connector.graph.run(distribution_query).data()
                            
                            if distribution:
                                df_dist = pd.DataFrame(distribution)
                                
                                # Cr√©er le graphique
                                fig, ax = plt.subplots(figsize=(12, 6))
                                sns.barplot(data=df_dist, x="film_count", y="actor_count", ax=ax)
                                ax.set_title("Distribution des acteurs par nombre de films")
                                ax.set_xlabel("Nombre de films")
                                ax.set_ylabel("Nombre d'acteurs")
                                plt.tight_layout()
                                
                                st.pyplot(fig)
                        except Exception as e:
                            st.error(f"Erreur lors de l'ex√©cution de la requ√™te: {e}")
                    
                    elif selected_neo4j_viz == "Collaborations r√©alisateur-acteur":
                        # Cette visualisation est complexe, nous utilisons un aper√ßu simplifi√©
                        df_collaborations, df_commercial = st.session_state.neo4j_queries.query_30_analyze_director_actor_collaborations(min_collaborations=3)
                        
                        if df_collaborations is not None:
                            st.write("Top collaborations entre r√©alisateurs et acteurs :")
                            st.dataframe(df_collaborations)
                            
                            if df_commercial is not None:
                                # Cr√©er un graphique des revenus moyens par collaboration
                                if 'avg_revenue' in df_commercial.columns:
                                    df_plot = df_commercial.sort_values('avg_revenue', ascending=False).head(10)
                                    
                                    fig, ax = plt.subplots(figsize=(12, 6))
                                    bars = sns.barplot(data=df_plot, x='director', y='avg_revenue', ax=ax)
                                    
                                    # Ajouter les noms des acteurs
                                    for i, bar in enumerate(bars.patches):
                                        bars.text(bar.get_x() + bar.get_width()/2., 
                                                  bar.get_height() + 5,
                                                  df_plot.iloc[i]['actor'],
                                                  ha='center', va='bottom', rotation=0, size=8)
                                    
                                    ax.set_title("Top 10 collaborations r√©alisateur-acteur par revenus moyens")
                                    ax.set_xlabel("R√©alisateur")
                                    ax.set_ylabel("Revenus moyens (millions $)")
                                    plt.xticks(rotation=45, ha='right')
                                    plt.tight_layout()
                                    
                                    st.pyplot(fig)
                        else:
                            st.warning("Aucune collaboration fr√©quente trouv√©e.")

# Page √Ä propos
elif page == "√Ä propos":
    st.header("√Ä propos du projet")
    
    st.subheader("√âquipe")
    st.write("Votre nom et les membres de votre √©quipe")
    
    st.subheader("Description du projet")
    st.write("""
    Ce projet a √©t√© r√©alis√© dans le cadre du cours "NoSQL Databases" √† ESIEA en 2024-2025.
    
    L'objectif √©tait d'explorer deux types de bases de donn√©es NoSQL :
    - MongoDB (orient√©e document)
    - Neo4j (orient√©e graphe)
    
    et de d√©velopper une application Python capable d'interagir avec ces bases de donn√©es
    pour r√©pondre √† diverses questions.
    """)
    
    st.subheader("Fonctionnalit√©s impl√©ment√©es")
    st.write("""
    1. Connexion aux deux bases de donn√©es NoSQL
    2. Import des donn√©es de films depuis un fichier JSON
    3. Cr√©ation de n≈ìuds et relations dans Neo4j bas√©s sur les donn√©es MongoDB
    4. Ex√©cution de requ√™tes complexes pour r√©pondre aux questions du projet
    5. Visualisation des r√©sultats avec Matplotlib, Seaborn et Streamlit
    """)
    
    st.subheader("Technologies utilis√©es")
    st.write("""
    - **Python** : Langage de programmation principal
    - **MongoDB** : Base de donn√©es orient√©e document
    - **Neo4j** : Base de donn√©es orient√©e graphe
    - **Streamlit** : Framework pour l'interface utilisateur
    - **Pandas** : Manipulation de donn√©es
    - **Matplotlib et Seaborn** : Visualisation de donn√©es
    """)

# Pied de page
st.sidebar.markdown("---")
st.sidebar.markdown("¬© 2024-2025 - Projet NoSQL ESIEA")